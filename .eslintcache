[{"C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\App.tsx":"1","C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\weather\\Home.tsx":"2","C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\index.tsx":"3","C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\reportWebVitals.ts":"4"},{"size":337,"mtime":1611850634124,"results":"5","hashOfConfig":"6"},{"size":8991,"mtime":1611851626673,"results":"7","hashOfConfig":"6"},{"size":630,"mtime":1611850605160,"results":"8","hashOfConfig":"6"},{"size":425,"mtime":1608085050542,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11ocuos",{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\App.tsx",[],"C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\weather\\Home.tsx",["19","20","21","22","23","24"],"import { Icon, Image, SearchBox, TextField } from '@fluentui/react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport Slider from \"react-slick\"\r\ninterface State {\r\n\r\n}\r\nexport const Weather = () => {\r\n\r\n    const date = new Date();\r\n    const btnClassName = \"my-1 switch-options--btn\";\r\n    const defaultWeatherObj: any = {};\r\n    const [selectedWeather, setWeatherObject] = useState(defaultWeatherObj);\r\n    const [isClick, setClick] = useState(0);\r\n    const [isInvalid, setInvalid] = useState(false);\r\n    useEffect(() => {\r\n        requestData();\r\n        requestDailyData();\r\n    }, [])\r\n    const defaultData: any = {};\r\n    const [dailyData, setDailyData] = useState(defaultData);\r\n    const [weatherData, setWeatherData] = useState(defaultData);\r\n    const requestDailyData = (query?: string) => {\r\n        let dailyDataURL = 'https://community-open-weather-map.p.rapidapi.com/forecast/daily';\r\n        axios.request({\r\n            method: 'GET',\r\n            url: dailyDataURL,\r\n            params: {\r\n                q: query ?? 'hanoi',\r\n                cnt: 16,\r\n                lat: '0',\r\n                lon: '0',\r\n                // callback: 'test',\r\n                id: '2172797',\r\n                lang: 'null',\r\n                units: '\"metric\" or \"imperial\"',\r\n                mode: 'xml, html'\r\n            },\r\n            headers: {\r\n                'x-rapidapi-key': '64c9634279msh092ca792baec574p16f3f5jsn1abe401d3871',\r\n                'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n            }\r\n        }).then(function (response) {\r\n            setDailyData(response.data);\r\n        }).catch(function (error) {\r\n            setInvalid(true);\r\n        });\r\n    }\r\n    const requestData = (query?: string) => {\r\n        let weatherURL = 'https://community-open-weather-map.p.rapidapi.com/weather';\r\n        axios.request({\r\n            method: 'GET',\r\n            url: weatherURL,\r\n            params: {\r\n                q: query ?? 'hanoi',\r\n                // cnt: 5,\r\n                lat: '0',\r\n                lon: '0',\r\n                // callback: 'test',\r\n                id: '2172797',\r\n                lang: 'null',\r\n                units: '\"metric\" or \"imperial\"',\r\n                mode: 'xml, html'\r\n            },\r\n            headers: {\r\n                'x-rapidapi-key': '64c9634279msh092ca792baec574p16f3f5jsn1abe401d3871',\r\n                'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n            }\r\n        }).then(function (response) {\r\n            setWeatherData(response.data);\r\n        }).catch(function (error) {\r\n            setInvalid(true);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (dailyData.list) {\r\n            setWeatherObject({ ...dailyData.list[0] });\r\n        }\r\n        // setData(data);\r\n    }, [dailyData])\r\n    const getCelsiusDegree = (kDegree: number) => {\r\n        return Math.ceil(kDegree - 273.15) + \"Â°\";\r\n    }\r\n    const getWindSpeed = (speed: number) => {\r\n        return Math.round(speed) + 'km/h';\r\n    }\r\n    const getVisibility = (visibility: number) => {\r\n        return (visibility / 1000) + ' km';\r\n    }\r\n\r\n    const Details = () => {\r\n        return weatherData.main && (\r\n\r\n            <div className=\"daily-item\">\r\n                <span className=\"h5 m-0\" >\r\n                    Feels Like  {getCelsiusDegree(weatherData.main.feels_like)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\" >\r\n                    Wind  {getWindSpeed(weatherData.wind.speed)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\">\r\n                    Visibility {getVisibility(weatherData.visibility)}\r\n                </span>\r\n                <span className=\"h5 m-0 ml-4\" >\r\n                    Humidity  {weatherData.main.humidity + '%'}\r\n                </span>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    const getData = (date: number) => {\r\n        const time = new Date(date * 1000);\r\n        return moment(time).format('ddd') + ' ' + time.getDate();\r\n    }\r\n    const getImageUrl = (fileName: string) => {\r\n        return `http://openweathermap.org/img/w/${fileName}.png`\r\n    }\r\n\r\n    const dailyList = () => {\r\n        return dailyData.list && dailyData.list.map((item: any, index: number) => {\r\n            return (\r\n                <>\r\n                    <div onClick={() => {\r\n                        setClick(index);\r\n                        setWeatherObject({ ...dailyData.list[index] })\r\n                    }} className={`daily-items  arrow-down  d-flex flex-column align-items-center ` + (isClick === index ? 'daily-items--active' : '')} >\r\n                        <span className=\"header h3\">\r\n                            {getData(item.dt)}\r\n                        </span>\r\n                        <Image style={{ width: '44px' }} src={getImageUrl(item.weather[0].icon)}></Image>\r\n                        <div className=\"d-flex \">\r\n                            <span className=\" max-celsius my-0 h1\">\r\n                                {getCelsiusDegree(item.temp.max)}\r\n                            </span>\r\n                            <span className=\"min-celsius  my-0 ml-4 h3 mt-auto\">\r\n                                {getCelsiusDegree(item.temp.min)}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center w-100\" >\r\n                            <span className=\"h4\">\r\n                                {item.weather[0].main}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-center arrow-down-container\">\r\n                        <div className=\"arrow-down\"></div>\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n    function Arrow(props: any) {\r\n        let className = props.type === \"next\" ? \"nextArrow\" : \"prevArrow\";\r\n        className += \" arrow\";\r\n        const char = props.type === \"next\" ? \">\" : \"<\";\r\n        return (\r\n            <span className={className} onClick={props.onClick} >\r\n                {char}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    return (weatherData &&\r\n        <div className=\"container\">\r\n            <SearchBox\r\n                placeholder='Type your city'\r\n                className='position-absolute searchbox-bar'\r\n                onSearch={(query) => {\r\n                    requestDailyData(query);\r\n                    requestData(query);\r\n                }}\r\n                onChange = {()=>{\r\n                    setInvalid(false);\r\n                }}\r\n\r\n            ></SearchBox>\r\n            <span className={isInvalid ? \"pl-1 text-danger errorMessage position-absolute\" : 'd-none'}>\r\n                Your city input is invalid\r\n            </span>\r\n            <div className=\"weather-container\">\r\n            </div>\r\n            <div className=\"weather-body d-flex align-items-center flex-column\">\r\n                <span className=\"h2 weather-location mt-6\">\r\n                    {weatherData.name}\r\n                </span>\r\n                <div className=\"weather-celsius d-flex align-items-center\">\r\n                    <Image src=\"https://openweathermap.org/img/w/04n.png\"></Image>\r\n                    <span className=\"ml-2\" style={{ fontSize: '44px' }}>\r\n                        {weatherData.main && getCelsiusDegree(weatherData.main.temp!)}\r\n                    </span>\r\n                </div>\r\n                {weatherData.weather && weatherData.weather.map((weather: any) => {\r\n                    return (<div className=\"weather-content h2 mt-0\">\r\n                        {weather.main}\r\n                    </div>)\r\n                })}\r\n                <div className=\"update-time h3 mt-2\">\r\n                    {\"Updated as of \" + new Date().toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, \"$1$3\")}\r\n                </div>\r\n                <div className=\"weather-bottom \">\r\n                    {Details()}\r\n                </div>\r\n                <div className=\"container\">\r\n                    <span className=\"h1 text-light flex-start  \" style={{ fontSize: '26px', fontWeight: 'normal' }}>\r\n                        Daily\r\n                </span>\r\n                    <div className=\"daily-list\">\r\n                        <Slider\r\n                            dots={false} slidesToShow={7}\r\n                            slidesToScroll={1}\r\n                            infinite={false}\r\n                            nextArrow={<Arrow type=\"next\" />}\r\n                            touchMove={false}\r\n                            prevArrow={<Arrow type=\"prev\" />}\r\n                        >\r\n                            {dailyList()}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\index.tsx",[],"C:\\Users\\hymrd\\Desktop\\ReactJS\\todolist\\src\\reportWebVitals.ts",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":10,"nodeType":"27","messageId":"28","endLine":1,"endColumn":14},{"ruleId":"25","severity":1,"message":"29","line":1,"column":34,"nodeType":"27","messageId":"28","endLine":1,"endColumn":43},{"ruleId":"25","severity":1,"message":"30","line":8,"column":11,"nodeType":"27","messageId":"28","endLine":8,"endColumn":16},{"ruleId":"25","severity":1,"message":"31","line":13,"column":11,"nodeType":"27","messageId":"28","endLine":13,"endColumn":15},{"ruleId":"25","severity":1,"message":"32","line":14,"column":11,"nodeType":"27","messageId":"28","endLine":14,"endColumn":23},{"ruleId":"25","severity":1,"message":"33","line":16,"column":12,"nodeType":"27","messageId":"28","endLine":16,"endColumn":27},"@typescript-eslint/no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'State' is defined but never used.","'date' is assigned a value but never used.","'btnClassName' is assigned a value but never used.","'selectedWeather' is assigned a value but never used."]